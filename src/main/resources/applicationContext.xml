<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2010 The myBatis Team Licensed under the Apache License, Version 
	2.0 (the "License"); you may not use this file except in compliance with 
	the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
	Unless required by applicable law or agreed to in writing, software distributed 
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
	OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
	the specific language governing permissions and limitations under the License. -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<!-- start @Scheduled -->
	<task:annotation-driven />
	
	<context:component-scan base-package="com.excareers" /> 
	
	<context:property-placeholder location="classpath*:*.properties" />
	
	<!-- datasource -->
	<bean id="commonDataSourceProperties" abstract="true"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver.mysql}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialPoolSize" value="5" />
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="25" />
		<property name="maxStatements" value="200" />
		<property name="maxIdleTime" value="600" />
		<property name="acquireIncrement" value="5" />

		<property name="acquireRetryAttempts" value="30" />
		<property name="acquireRetryDelay" value="1000" />
		<property name="testConnectionOnCheckin" value="true" />
		<property name="automaticTestTable" value="c3p0testtable" />
		<property name="idleConnectionTestPeriod" value="60" />
		<property name="checkoutTimeout" value="3000" />
	</bean>

	<!-- master -->
	<bean id="targetDataSource" parent="commonDataSourceProperties"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<!-- slave -->
	<bean id="targetDataSource-read" parent="commonDataSourceProperties"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="jdbcUrl" value="${jdbc.url.read}" />
		<property name="user" value="${jdbc.username.read}" />
		<property name="password" value="${jdbc.password.read}" />
	</bean>

	<bean id="readWriteDataSource" class="com.excareers.datasource.ReadWriteDataSource">
		<property name="writeDataSource" ref="targetDataSource" />
		<property name="readDataSourceMap">
			<map>
				<entry key="readDataSource1" value-ref="targetDataSource-read" />
			</map>
		</property>
	</bean>

	<bean id="readWriteDataSourceTransactionProcessor" class="com.excareers.datasource.ReadWriteDataSourceProcessor">
		<property name="forceChoiceReadWhenWrite" value="true" />
	</bean>

	<bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource">
			<ref local="readWriteDataSource" />
		</property>
	</bean>
  
  <!-- transaction manager, use JtaTransactionManager for global tx -->
  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
  </bean>
  
	<!-- Advice for transaction -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="persistence*" propagation="REQUIRED" />

			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<!-- ensure that the above transactional advice runs for any execution of 
		an operation defined by the FooService interface -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="fooServiceOperation" expression="execution(* com.excareers.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation" />
		<!-- AOP choose read or write -->
		<aop:aspect order="-2147483648" ref="readWriteDataSourceTransactionProcessor">
			<aop:around pointcut-ref="fooServiceOperation" method="determineReadOrWriteDB" />
		</aop:aspect>
	</aop:config>
	
  <!-- define the SqlSessionFactory, notice that configLocation is not needed 
    when you use MapperFactoryBean -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <property name="configLocation" value="classpath:sqlmap-config.xml" />
  </bean>
  
	<!-- automatic scan mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.excareers.dao" />
		<property name="markerInterface" value="com.excareers.dao.SqlMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<!-- shiro异常处理 -->
	<bean class="com.excareers.auth.DefaultExceptionHandler"/>
	<!-- 配置国际化资源文件路径 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
	<property name="basename">
	<!-- 定义消息资源文件的相对路径 -->
		<value>messages/message</value>
	</property>
	</bean>
	<!-- 基于Cookie的本地化解析器 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="cookieMaxAge" value="604800"/>
		<property name="defaultLocale" value="zh_CN"/>
		<property name="cookieName" value="Language"></property>
	</bean>
	<!-- 基于Session的本地化解析器 -->
	<!--<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />-->
</beans>